"""
Django settings for jango_currencies project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import datetime
import os

from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SITE_ID = 1

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'w+a6rz^v6#d_z_743&x%r%8s0)b789q8mr&2etp!0nrhi@hlj-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL')
CELERY_IMPORTS = ["currencies_api.tasks"]
CELERY_TASK_ALWAYS_EAGER = False

ALLOWED_HOSTS = []

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'currencies_api.apps.CurrenciesApiConfig',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    'rest_auth.registration',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'celery',
    'import_export'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    )
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'jango_currencies.middleware_auth.AuthMiddleware'
]

ROOT_URLCONF = 'jango_currencies.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jango_currencies.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('PG_NAME'),
        'USER': os.getenv('PG_USER'),
        'PASSWORD': os.getenv('PG_PASS'),
        'HOST': os.getenv('PG_HOST'),
        'PORT': os.getenv('PG_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
REST_USE_JWT = True
ACCOUNT_EMAIL_REQUIRED = False
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

PATH_AUTH = [
    '/convert/',
    '/currencies/',
    '/auth/logout/'
]

CBR_URL = 'https://www.cbr-xml-daily.ru/daily_json.js'
REQUESTS_TIMEOUT = os.getenv('REQUESTS_TIMEOUT')

PERIOD_TASK_CELERY_MINUTE = os.getenv('PERIOD_TASK_CELERY_MINUTE', 0)
PERIOD_TASK_CELERY_HOUR = os.getenv('PERIOD_TASK_CELERY_HOUR', 0)

MAX_RETRY_CELERY_TASK = os.getenv('MAX_RETRY_CELERY_TASK')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {'default': {'class': 'logging.StreamHandler'}},
    'loggers': {
        '': {
            'handlers': ['default'],
            'level': 'INFO' if not DEBUG else 'DEBUG',
            'propagate': True
        },
    }
}

CELERY_BEAT_SCHEDULE = {
    'load_currencies': {
        'task': 'currencies_api.tasks.load_currencies',
        'schedule': crontab(minute=PERIOD_TASK_CELERY_MINUTE, hour=PERIOD_TASK_CELERY_HOUR)
    }
}
